* Log
** Integrate development work, from afadmin_core to afadmin_client
*** DONE Flash Messages
CLOSED: [2023-04-24 Mon 15:38]

*** DONE Dialogs
CLOSED: [2023-04-25 Tue 14:
** Separate the application logic
I want to be able to:

- have all controllers defined in their own directory.
  This allows the decoupling of the controllers from the view.
- The view must have an easy way to interact with the model
  through actions
- The controllers must take into account react's model
  Changes in the model for which the view should be notified must
  cause a re-render of the component tree.

  What about encapsulation? Maybe some part of the hierarchy
  defines its own model.
- A controller must be able to invoke any other controller
- User actions triggering controllers should take into account rapid fire.

  One must take into account controllers which sometimes behave asynchcronously and
  other times asynchronously. In particular one must be weary of situations such as:

  - a user event, such as clicking a button.
  - The user might click the button in very rapid succession causing problems.

    Such behavior should be buffered. Only the last user initiated event should
    be taken into account.

    What happens if the user initiates the actions when the action is already midway?

    Controllers must be either asynchronous or synchronous.

    If they are asynchronous and some of the asynchronous calls needs to communicate
    with the backend end then this following situation must be taken into consideration:

    - A user initiated event communicates with the backend.
    - A second user initiated event of the same type invokes the controller
      but this time the controller does not need to communicate with the backend
      but must still perform some asynchronous call.

*** implementation
The <App> provides the global model to the app through context.
That takes into account the react model.

When changes will occur on the model, the app will render the new model.

** 05/10/23
*** Merge teams page
Within the merge teams page the administrator creates a new team.

In order for a new team to be created the following conditions must be met:

1. The team name must be unique
2. All team members must have their wristbands registered

The creation of the team is actuated by a button with the label merge.

On the event, the team and its members are checked against the stated
conditions. If the conditions are met, the team is created.

**** Displaying and selecting available players
Within the merge teams page a combobox is utilized for displaying and selecting
players.

The administrator selects a player by either CLICKING on his Card, pressing
ENTER or TAB.

In order to assist in the selection process the administrator is provided with
the following options:

1. scroll the list
2. search for a player through the text input
3. re-arrange the list by using the various sort options
   - by group party

**** Team staging area
The team staging area holds the team members that have been selected through the
combobox.

It is a list comprised of six player cards which are initially empty and upon
player selection are populated with the information of the player.

Each player card provides the actuators for the:

1. Removal of the player from the staging area.
2. Toggling wristband pairing.

**** Team name and creation
1. Text input
   Through which the administrator defines a new teams name
2. Merge button
   Through which the administrator may create the new team.

** 06/10/23
*** Displaying and selecting available players
**** DONE Player card
CLOSED: [2023-05-11 Thu 11:09]
Each player listed is represented by a playerCard.

The playerCard displays the following information:

- username
- rfid
- wristband
- a visual cue informing the admin of the player being of a group party

**** DONE Add selected player to the staging area
CLOSED: [2023-05-11 Thu 12:27]
*** Staging area
**** DONE Toggling pairing mode
CLOSED: [2023-05-11 Thu 12:53]
**** DONE Remove player from staging area
CLOSED: [2023-05-11 Thu 12:56]

*** Live view
**** TODO Prepary the route directory template
* Dealing with wristband subscriptions
user toggles pairing mode.
* How'tos
** How to contain any element within the app boundaries.
position: absolute;
