#+TODO: TODO BUG | DONE
* TODOS
** Friday
<2023-05-19 Fri>
*** TODO Group party
CLOSED: [2023-05-17 Wed 14:29]
*** TODO Packages
*** TODO Subscriptions
*** TODO Team controls
**** start
**** stop

** Friday 26/10/23
*** Refactoring
**** TODO Route structure should be standardized
**** TODO Remove unnecessary code from afmachine_interface
**** TODO Remove unnecessary code from app/
**** TODO Providing a store and its controllers should be standardized
**** TODO Actions which trigger asynchronous state changes must be carefully designed.
**** TODO Extract common components such as PlayerWidget, PlayerCard, etc etc
**** TODO Tooltip component
**** TODO Comboboxes empty listbox Component
**** TODO Comboboxes option abstraction
**** TODO Comboboxes positioning and dimensions.
**** TODO Initial capability for protected routes and resources
**** TODO Error states must be handled client side.
**** TODO Handle unkwown errors and control their end state and visualization.
**** TODO Sync UI with backend state changes.
**** Common entities from which components are derived across afadmin_client
***** Team
***** Roster
***** Package | pkg
***** Roster member | member
***** Wristband
***** Player
***** Cashier
***** Admin
***** Manager
***** Root
***** Afmachine
***** Panel
***** Layout
***** Route
renders store
renders the layout
each layout renders a panel.
***** Store
***** Context | ctx
***** Site
- Responsible for rendering the site according to display size etc.
- Hosting of outlet.
- It is itself a layout component
***** App
Instantiates the connection to afmachine.
Instantiates stores, controllers
Instantiates subscriptions.
Responsible for redirecting user to authentication page.
***** Authorize
**** Routes structure
/ -> renders App
The App Component

Registration -> render Navigate to=/register/player
layout -> registration -> render navigate to

All top level routes share the same layout. Which is the
#+begin_src js
    <App>
    <Site>
    <Layout/>
    <Outlet/>
    </Layout>
    </Site>
    </App>

#+end_src
**** Route and Resource protection
Authorize({level: "", children})

** Friday 27/10/23
*** Refactoring
**** TODO Route structure should documented and cleanly structured
**** TODO Remove unnecessary code from afmachine_interface
**** TODO Remove unnecessary code from app/
**** TODO Providing a store and its controllers should be standardized
**** TODO Actions which trigger asynchronous state changes must be carefully designed.
**** TODO Extract common components such as PlayerWidget, PlayerCard, etc etc
**** TODO Tooltip component
**** TODO Comboboxes empty listbox Component
**** TODO Comboboxes option abstraction
**** TODO Comboboxes positioning and dimensions.
**** TODO Initial capability for protected routes and resources
**** TODO Error states must be handled client side.
**** TODO Handle unkwown errors and control their end state and visualization.
**** TODO Sync UI with backend state changes.
**** Common entities from which components are derived across afadmin_client
***** Team
***** Roster
***** Package | pkg
***** Roster member | member
***** Wristband
***** Player
***** Cashier
***** Admin
***** Manager
***** Root
***** Afmachine
***** Panel
***** Layout
***** Route
renders store
renders the layout
each layout renders a panel.
***** Store
***** Context | ctx
***** Site
- Responsible for rendering the site according to display size etc.
- Hosting of outlet.
- It is itself a layout component
***** App
Instantiates the connection to afmachine.
Instantiates stores, controllers
Instantiates subscriptions.
Responsible for redirecting user to authentication page.
***** Authorize
**** Routes structure
/ -> renders App
The App Component

Registration -> render Navigate to=/register/player
layout -> registration -> render navigate to

All top level routes share the same layout. Which is the
#+begin_src js
    <App>
    <Site>
    <Layout/>
    <Outlet/>
    </Layout>
    </Site>
    </App>

#+end_src
**** Route and Resource protection
Authorize({level: "", children})

*** src/routes.jsx
The Router.jsx file is used to instantiate the client side router Component
provided by react-router-dom.

The fact that it is used to declare routes and the component's they render
for the whole app makes it a natural point of centralization.

** DONE REMOVING PLAYERS FROM QUEUE OR TEAM CALLS WRONG TOGGLEWRISTBAND
CLOSED: [2023-06-02 Fri 12:14]
** DONE Table comboboxes should not interpret click and keyboard selections as input
CLOSED: [2023-06-02 Fri 12:14]
* Log
** Integrate development work, from afadmin_core to afadmin_client
*** DONE Flash Messages
CLOSED: [2023-04-24 Mon 15:38]

*** DONE Dialogs
CLOSED: [2023-04-25 Tue 14:
** Separate the application logic
I want to be able to:

- have all controllers defined in their own directory.
  This allows the decoupling of the controllers from the view.
- The view must have an easy way to interact with the model
  through actions
- The controllers must take into account react's model
  Changes in the model for which the view should be notified must
  cause a re-render of the component tree.

  What about encapsulation? Maybe some part of the hierarchy
  defines its own model.
- A controller must be able to invoke any other controller
- User actions triggering controllers should take into account rapid fire.

  One must take into account controllers which sometimes behave asynchcronously and
  other times asynchronously. In particular one must be weary of situations such as:

  - a user event, such as clicking a button.
  - The user might click the button in very rapid succession causing problems.

    Such behavior should be buffered. Only the last user initiated event should
    be taken into account.

    What happens if the user initiates the actions when the action is already midway?

    Controllers must be either asynchronous or synchronous.

    If they are asynchronous and some of the asynchronous calls needs to communicate
    with the backend end then this following situation must be taken into consideration:

    - A user initiated event communicates with the backend.
    - A second user initiated event of the same type invokes the controller
      but this time the controller does not need to communicate with the backend
      but must still perform some asynchronous call.

*** implementation
The <App> provides the global model to the app through context.
That takes into account the react model.

When changes will occur on the model, the app will render the new model.

** 05/10/23
*** Merge teams page
Within the merge teams page the administrator creates a new team.

In order for a new team to be created the following conditions must be met:

1. The team name must be unique
2. All team members must have their wristbands registered

The creation of the team is actuated by a button with the label merge.

On the event, the team and its members are checked against the stated
conditions. If the conditions are met, the team is created.

**** Displaying and selecting available players
Within the merge teams page a combobox is utilized for displaying and selecting
players.

The administrator selects a player by either CLICKING on his Card, pressing
ENTER or TAB.

In order to assist in the selection process the administrator is provided with
the following options:

1. scroll the list
2. search for a player through the text input
3. re-arrange the list by using the various sort options
   - by group party

**** Team staging area
The team staging area holds the team members that have been selected through the
combobox.

It is a list comprised of six player cards which are initially empty and upon
player selection are populated with the information of the player.

Each player card provides the actuators for the:

1. Removal of the player from the staging area.
2. Toggling wristband pairing.

**** Team name and creation
1. Text input
   Through which the administrator defines a new teams name
2. Merge button
   Through which the administrator may create the new team.

** 06/10/23
*** Displaying and selecting available players
**** DONE Player card
CLOSED: [2023-05-11 Thu 11:09]
Each player listed is represented by a playerCard.

The playerCard displays the following information:

- username
- rfid
- wristband
- a visual cue informing the admin of the player being of a group party

**** DONE Add selected player to the staging area
CLOSED: [2023-05-11 Thu 12:27]
*** Staging area
**** DONE Toggling pairing mode
CLOSED: [2023-05-11 Thu 12:53]
**** DONE Remove player from staging area
CLOSED: [2023-05-11 Thu 12:56]

*** Live view
**** TODO Prepary the route directory template
** 15/10/23
*** Group party
A group party refers to the capability offered by agent_factory to quickly
generate teams and players so that a group of people may quickly enter a game,
bypassing the normal registration procedure.

**** DONE removing a team from the group party
CLOSED: [2023-05-15 Mon 15:06]
**** DONE removing a player from the team
CLOSED: [2023-05-15 Mon 15:06]
**** DONE adding a player to the team
CLOSED: [2023-05-15 Mon 15:06]
**** TODO pairing wristband
**** TODO unpairing wristband
** 16/10/23
*** Group Party
**** DONE add group team corrupted roster players                       :BUG:
CLOSED: [2023-05-16 Tue 10:49]
***** Description
The action 'add group team' if initiated after a wristband has been paired to a
roster member instead of creating a new team and roster with the default initial
state it toggles on the wristband.pairing flag for each automatically created
roster member.
***** Cause
the generateGroupPartyTeam function was using the PLAYER_SCHEMA in order to generate
a team.

The PLAYER_SCHEMA is comprised of the WRISTBAND_SCHEMA.

Because PLAYER_SCHEMA is an object and spread syntax was used to copy its
properties, the WRISTBAND_SCHEMA  property which is itself  an object was not
deep cloned. Thus each roster member referenced by a unique address space shared
the same address space for their WRISTBANDS. o(-.-)o

**** DONE pairing wristband
CLOSED: [2023-05-16 Tue 11:11]
**** DONE unpairing wristband
CLOSED: [2023-05-16 Tue 11:11]
**** DONE validate each wristband
CLOSED: [2023-05-16 Tue 15:07]
Each roster member's wristband must:

1. Be of a unique color across the roster
   If the color of the wristband is not unique the administrator is instructed
   and the scanned wristband is discarded.
2. Must be available for pairing
   After passing the wristband color test, the wristband is send to the server
   for verification. If it is not free for pairing to the roster member then the
   scanned wristband is discarded. If the test is passed the wristband is paired
   with the player but not registered.

**** DONE Wristband colors must be unique across a team
CLOSED: [2023-05-16 Tue 15:07]
**** DONE team creation
CLOSED: [2023-05-18 Thu 08:59]
Each group party team is created after the merge_group_party event.

The merging of the teams is sequential. When one team has been registered, the next one is chosen for registration.

** 17/10/23
*** Group party
**** TODO Should a group party team be allowed to be removed if it is the only one left in the group party?
**** DONE team creation
CLOSED: [2023-05-17 Wed 14:28]
The merging of the teams is sequential. When one team has been registered, the next one is chosen for registration.

Each group party team is created after the merge_group_party event.


**** TODO Spread group party size evenly among teams

** 18/10/23
*** Packages
**** dividie the layout into the appropriate sections
** 22/10/23
*** Refactor
**** Context, store guidelines

React's dependency injection mechanism utilizes the Context interface.

The user instantiates a context Component.
------------------------------
const Context = React.createContext(null);

Provides the context within a Component.
------------------------------
function Component() {

return <Context.Provider value={}></Context.Provider>
}

Consumes the Context within a descendant Component of the Provider.
------------------------------
import Context from 'ContextFile';
function Descendant() {
const context = React.useContext(Context);
}

** 24/10/23 May Wednesday
**** DONE Route structure should documented and cleanly structured
CLOSED: [2023-05-24 Wed 13:52]
**** DONE Remove unnecessary code from afmachine_interface
CLOSED: [2023-05-24 Wed 13:52]
**** DONE Remove unnecessary code from app/
CLOSED: [2023-05-24 Wed 13:52]
**** DONE Providing a store and its controllers should be standardized
CLOSED: [2023-05-24 Wed 15:23]
** 04/06/23 June Sunday
*** Finish the group party page.
Each team shall have a context and a store of its own.
At initialization the team is composed of the standard team schema from agent
factory.shared using the fuction structuredClone();
* Dealing with wristband subscriptions

user toggles pairing mode.
* How'tos
** How to contain any element within the app boundaries.
position: absolute;

* log 07-06-2023
an event triggers a statefull action.

* log 08-06-2023
** flush() increase flexibility
Right now flush(event, listener) accepts an event identifier and a listener
function. The listener function is presumed to be equal to one among the
registered functions.

Flush then proceeds to iterate over the registered listeners to the event with
the goal of removing the match if any.
An error is thrown in the case that a match is not found with the intention of
helping the user identify bugs.

I think that the flush procedure is too inflexible at the moment.

*1st inflexibility:*
_function references do not lend themselves as a means of identification_

In particular the use of functions as a means of testing equality is
problematic. Many times users want to register a function using an anonymous
function expression. Which means that a reference to the function is not kept
anywhere. As a result the user is forced to not use anonymous function
expression's. His only option is to define a function either through a function
declaration or function expression.

One possible solution to the problem is the use of ids. Each registered function
could be identified with an ID provided at the time of registration. The string
ID could then be provided as the second argument to flush(event, stringId). That
would allow for anonymous function expressions.

*2nd inflexibility:*
_lack of custom search functions_

Currently the search procedure is a simple iteration that uses the equality
operator to compare the argument function to the registered functions. If the
argument function is strictly equal (===) to a registered function , the
matching registered function is removed(flushed) from the event listeners array.
The fact that the equality test is fixed creates an overall inflexibility.

One possible solution to the problem is the use of function callbacks. The user
could be allowed to specify his own custom testing clause.

** DONE allow flush to accept an id
CLOSED: [2023-06-08 Thu 21:09]
** DONE ensure flush to accept a clause function
CLOSED: [2023-06-08 Thu 21:09]

* log 09-06-2023
AsyncAction class
The AsyncAction class is a promise wrapper.

action.fire()
action.fire()
action.fire();

* log 11-06-2023
** AsyncAction
An asyncAction is a wrapper to a promise. It's purpose is to provide a mechanism
for attaching listeners to the states of a Promise object.

Demonstrate that asyncaction works.

* log 12-06-2023
** Afmachine architecture
backend request - response -> parsing it -> logging -> Afmachine, or client side code
